{"version":3,"sources":["assets/mole.png","store/reducer.js","store/index.js","components/Mole.js","components/Gameboard.js","components/Status.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","Immutable","gameState","moles","_","times","i","index","moleState","gameLength","roundLength","molesPerRoundLow","molesPerRoundHigh","moleOutLengthLow","moleOutLengthHigh","store","createStore","state","arguments","length","undefined","action","type","set","localStorage","getItem","map","mole","update","time","score","highScore","setItem","setIn","startGame","getState","Audio","process","play","dispatch","clockInterval","setInterval","roundsInterval","triggerRound","setTimeout","clearInterval","molesIn","filter","indexList","molesThisRound","random","sampleSize","forEach","triggerMole","moleOutLength","onMoleClick","event","Mole","_this$props","this","props","react_default","a","createElement","className","getHoleClass","onClick","getMoleClass","src","molePNG","alt","React","Component","concat","Gameboard","Mole_Mole","key","Status","onStart","date","Date","format","minutes","getMinutes","seconds","getSeconds","renderStarted","renderGameOver","App","Status_Status","Gameboard_Gameboard","render","ReactDOM","App_App","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.8212ad46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mole.01c4e8db.png\";","import Immutable from 'seamless-immutable';\nimport _ from 'lodash';\n\nconst initialState = Immutable({\n  gameState: 'unstarted',                                  // unstarted | new | gameover \n  moles: _.times(9, i => ({ index: i, moleState: 'in' })), // in | out | hit\n  gameLength: 30000,                                       // 30000 milliseconds = 30s\n});\n\nexport default function reducer(state=initialState, action) {\n\n  switch (action.type) {\n    case 'GAMESTATE_START': \n      return state\n        .set('gameState', 'started')\n        .set('score', 0)\n        .set('time', state.gameLength)\n        .set('highScore', localStorage.getItem('highScore') || 0)\n        .set('moles', state.moles.map(mole => mole.set('moleState', 'in')));\n\n    case 'TICK': \n      return state.update('time', time => time - 1000);\n\n    case 'GAMESTATE_END': \n      // set new highScore in localStorage for persistence\n      if (state.score > state.highScore) {\n        localStorage.setItem('highScore', state.score);\n      }\n\n      return state\n        .set('gameState', 'gameover')\n        .set('moles', state.moles.map(mole => mole.set('moleState', 'in')));\n\n    case 'MOLE_COMES_OUT':\n      return state\n        .setIn(['moles', action.index, 'moleState'], 'out');\n\n    case 'MOLE_GOES_IN':\n      return state\n        .setIn(['moles', action.index, 'moleState'], 'in');\n\n    case 'MOLE_HIT':\n      return state\n        .setIn(['moles', action.index, 'moleState'], 'hit')\n        .update('score', score => score + 1);\n\n    default:\n      return state;\n  }\n}","import { createStore } from 'redux';\nimport _ from 'lodash';\nimport reducer from './reducer.js';\n\n// CONFIGURABLE\nconst gameLength = 30000, // 30000 milliseconds = 30s\n      roundLength = 1000, // the time in between new moles popping up\n      molesPerRoundLow = 1, // low/high of how many moles per round\n      molesPerRoundHigh = 3,\n      moleOutLengthLow = 1500, // low/high of how long a mole stays out\n      moleOutLengthHigh = 2500;\n    \nconst store = createStore(reducer);\n\n// GAME LOGIC\nfunction startGame() {\n  const gameState = store.getState().gameState;\n\n  if (gameState !== 'started') {\n    const audio = new Audio(process.env.PUBLIC_URL + '/whack.mp3');\n    audio.play();\n    store.dispatch({ type: 'GAMESTATE_START' });\n\n    // dispatch a 'tick' every second\n    const clockInterval = setInterval(() => {\n      store.dispatch({ type: 'TICK' })\n    }, 1000);\n\n    // trigger a new round every roundLength\n    const roundsInterval = setInterval(triggerRound, roundLength);\n\n    // set a timeout to dispatch the 'game end' message\n    setTimeout(() => {\n      clearInterval(roundsInterval);\n      clearInterval(clockInterval);\n      store.dispatch({ type: 'GAMESTATE_END' });\n    }, gameLength);\n  }\n}\n\nfunction triggerRound() {\n  const moles = store.getState().moles,\n        molesIn = _.filter(moles, mole => mole.moleState === 'in'),\n        indexList = _.map(molesIn, mole => mole.index),\n        molesThisRound = _.random(molesPerRoundLow, molesPerRoundHigh);\n\n  _.sampleSize(indexList, molesThisRound).forEach(triggerMole);\n}\n\nfunction triggerMole(index) {\n  const moleOutLength = _.random(moleOutLengthLow, moleOutLengthHigh);\n\n  store.dispatch({ type: 'MOLE_COMES_OUT', index });\n  \n  // set a timeout to dispatch the 'mole goes in' message\n  setTimeout(() => {\n    store.dispatch({ type: 'MOLE_GOES_IN', index }) \n  }, moleOutLength);\n}\n\nfunction onMoleClick(index) {\n  return function (event) {\n    // only send the message if clicked mole is currently out\n    if (store.getState().moles[index].moleState === 'out') {\n      const audio = new Audio(process.env.PUBLIC_URL + '/whack.mp3');\n      audio.play();\n      store.dispatch({ type: 'MOLE_HIT', index });\n    }\n  }\n}\n\nexport default store;\nexport { startGame, onMoleClick };\n\n\n\n","import React from 'react';\nimport molePNG from '../assets/mole.png';\nimport './Mole.css';\n\nexport default class Mole extends React.Component {\n  render() {\n    const { moleState, onMoleClick } = this.props;\n\n    return (\n      <div className={getHoleClass(moleState)} onClick={onMoleClick}>\n        <img \n          className={getMoleClass(moleState)} \n          src={molePNG}\n          alt=\"mole\"\n        />\n      </div>\n    );\n  }\n}\n\nfunction getMoleClass(moleState) {\n  return `Mole ${moleState === 'out' ? 'Pop-out' : ''}`;\n}\n\nfunction getHoleClass(moleState) {\n  return `Hole ${moleState === 'hit' ? 'Mole-hit' : ''}`;\n}","import React from 'react';\nimport Mole from './Mole.js';\nimport './Gameboard.css';\n\nexport default class Gameboard extends React.Component {\n\n  render () {\n    const { moles, onMoleClick } = this.props;\n\n    return (\n      <div className=\"Gameboard\">\n        {moles && moles.map((mole) => \n          <Mole key={mole.index} \n                moleState={mole.moleState}\n                onMoleClick={onMoleClick(mole.index)}/>\n        )}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './Status.css';\n\nexport default class Status extends React.Component {\n  render() {\n    const { gameState, onStart, score, highScore, time } = this.props;\n\n    return (\n      <div className=\"Status\" onClick={onStart}>\n        {\n          gameState === 'unstarted' ? \n            renderUnstarted()\n          : gameState === 'started' ? \n            renderStarted(score, time)\n          : gameState === 'gameover' ? \n            renderGameOver(score, highScore)\n          : null\n        }\n      </div>\n    );\n  }\n}\n\nfunction renderUnstarted() {\n  return (\n    <div>\n      <h1>Whack-A-Mole</h1> \n      <h3>Whack here to start</h3>\n    </div>\n  );\n}\n\nfunction renderStarted(score, time) {\n  const date = new Date(time),\n        format = time => time < 10 ? '0' + time : time,\n        minutes = format(date.getMinutes()),\n        seconds = format(date.getSeconds());\n\n  return (\n    <div>\n      <h2>Score: {score}</h2>\n      <h3>Timer: {minutes}:{seconds}</h3>\n    </div>  \n  );\n}\n\nfunction renderGameOver(score, highScore) {\n  return (\n    <div>\n      <h1>Game Over</h1> \n      <h2>You scored {score} point(s)!</h2>\n      {\n        score > highScore ?\n        <h2>That's a new High Score!</h2>\n        : <h2>High Score: {highScore} points</h2>\n      }\n      <h3>Whack here to play again</h3>\n    </div>\n  );\n}\n","import React from 'react';\nimport Gameboard from './components/Gameboard.js';\nimport Status from './components/Status.js';\nimport './App.css';\n\nexport default class App extends React.Component {\n  render() {\n    const {state, onStart, onMoleClick} = this.props;\n    const {moles, gameState, score, highScore, time} = state;\n\n    return (\n      <div className=\"App\">\n        <Status \n          onStart={onStart}\n          gameState={gameState}\n          score={score}\n          highScore={highScore}\n          time={time}\n        />\n        <Gameboard \n          moles={moles} \n          onMoleClick={onMoleClick}\n          gameState={gameState}\n        />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store, { startGame, onMoleClick } from './store';\nimport App from './App';\nimport './index.css';\n\n// REDUX CONFIG\nstore.subscribe(render);\n\n// INITIAL RENDER\nrender();\n\n// RENDER FUNCTION\nfunction render() {\n  ReactDOM.render(\n    <App \n      state={store.getState()}\n      onStart={startGame}\n      onMoleClick={onMoleClick}\n    />, \n    document.getElementById('root'));\n}"],"sourceRoot":""}